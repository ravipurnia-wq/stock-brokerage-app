version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: stock-brokerage-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD:-stockbrokerage123}
      MONGO_INITDB_DATABASE: stock_brokerage
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./docker/mongodb/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - stock-brokerage-network
    command: mongod --auth

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    container_name: stock-brokerage-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - stock-brokerage-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}

  # Apache Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: stock-brokerage-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - stock-brokerage-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: stock-brokerage-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - stock-brokerage-network

  # Stock Brokerage Application
  stock-brokerage-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: stock-brokerage-app
    restart: unless-stopped
    depends_on:
      - mongodb
      - redis
      - kafka
    environment:
      # Spring Profiles
      SPRING_PROFILES_ACTIVE: docker
      
      # Database Configuration
      SPRING_DATA_MONGODB_HOST: mongodb
      SPRING_DATA_MONGODB_PORT: 27017
      SPRING_DATA_MONGODB_DATABASE: stock_brokerage
      SPRING_DATA_MONGODB_USERNAME: admin
      SPRING_DATA_MONGODB_PASSWORD: ${MONGODB_ROOT_PASSWORD:-stockbrokerage123}
      SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE: admin
      
      # Redis Configuration
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      
      # Kafka Configuration
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      
      # PayPal Configuration
      PAYPAL_CLIENT_ID: ${PAYPAL_CLIENT_ID}
      PAYPAL_CLIENT_SECRET: ${PAYPAL_CLIENT_SECRET}
      PAYPAL_MODE: ${PAYPAL_MODE:-sandbox}
      
      # Finnhub API Configuration
      FINNHUB_API_TOKEN: ${FINNHUB_API_TOKEN}
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-mySecretKey123456789012345678901234567890}
      
      # Application Configuration
      SERVER_PORT: 8080
      LOGGING_LEVEL_COM_STOCKBROKERAGE: INFO
    ports:
      - "8080:8080"
    volumes:
      - app_logs:/app/logs
    networks:
      - stock-brokerage-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: stock-brokerage-nginx
    restart: unless-stopped
    depends_on:
      - stock-brokerage-app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - stock-brokerage-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  app_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  stock-brokerage-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16